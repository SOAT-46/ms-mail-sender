// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"os"
	"strconv"

	"github.com/rabbitmq/amqp091-go"
	"github.com/soat-46/ms-mail-sender/internal/global/domain/entities"
	"github.com/soat-46/ms-mail-sender/internal/global/infrastructure/configuration"
	"github.com/soat-46/ms-mail-sender/internal/mail"
	"github.com/soat-46/ms-mail-sender/internal/mail/domain/commands"
	"github.com/soat-46/ms-mail-sender/internal/mail/infrastructure/listeners"
	"github.com/soat-46/ms-mail-sender/internal/mail/infrastructure/services"
	"gopkg.in/gomail.v2"
)

// Injectors from wire.go:

func injectApps() []entities.App {
	settings := injectSettings()
	dialer := injectGoMail(settings)
	sendMailService := services.NewSendMailService(settings, dialer)
	renderMailTemplate := services.NewRenderMailTemplate()
	sendMailCommand := commands.NewSendMailCommand(sendMailService, renderMailTemplate)
	queueSettings := injectRabbitMQSettings()
	channel := injectRabbitMQChannel(queueSettings)
	sendErrorMailQueueListener := listeners.NewSendErrorMailQueueListener(sendMailCommand, channel)
	sendSuccessMailQueueListener := listeners.NewSendSuccessMailQueueListener(sendMailCommand, channel)
	app := mail.NewApp(sendErrorMailQueueListener, sendSuccessMailQueueListener)
	v := newApps(app)
	return v
}

// wire.go:

func injectSettings() *entities.Settings {
	from := os.Getenv("MAIL_FROM")
	host := os.Getenv("MAIL_HOST")
	port, _ := strconv.Atoi(os.Getenv("MAIL_PORT"))
	username := os.Getenv("MAIL_USERNAME")
	password := os.Getenv("MAIL_PASSWORD")

	return entities.NewSettings(from, host, port, username, password)
}

func injectGoMail(settings *entities.Settings) *gomail.Dialer {
	return gomail.NewDialer(settings.Host, settings.Port, settings.Username, settings.Password)
}

func injectRabbitMQSettings() *entities.QueueSettings {
	host := os.Getenv("RABBITMQ_HOST")
	port, _ := strconv.Atoi(os.Getenv("RABBITMQ_PORT"))
	username := os.Getenv("RABBITMQ_USERNAME")
	password := os.Getenv("RABBITMQ_PASSWORD")
	return entities.NewQueueSettings(host, username, password, port)
}

func injectRabbitMQChannel(settings *entities.QueueSettings) *amqp091.Channel {
	client, err := configuration.OpenChannel(settings)
	if err != nil {
		panic(err)
	}
	return client
}

func newApps(mail2 *mail.App) []entities.App {
	return []entities.App{mail2}
}
